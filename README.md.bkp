# **Code Optimization Lab Exercise using Granite Code Model**
Code Optimization using IBM Granite Code

## Purpose
This lab provides guidance on using the IBM Granite Code base model to optimize Python code by leveraging libraries and efficient coding practices. This lab will demonstrate various techniques, including replacing loop-based logic with vectorized operations and improving recursive functions using memoization.

## Prerequisites
- **Basic Knowledge of Python**: Familiarity with Python functions, lists, and libraries like NumPy.
- **Replicate Account**: An account with Replicate for model inference calls.
- **REPLICATE_API_TOKEN**: Obtain an API token from Replicate, which will be stored as a Google Colab secret.

## Introduction
The [IBM Granite model cookbook on GitHub](https://github.com/ibm-granite-community/granite-kitchen) provides code generation examples for various applications, including optimization techniques. This lab focuses on optimizing Python code for performance improvements and includes examples of transforming list operations, recursive functions, and loop-based logic.

## Model Overview
The lab uses the IBM Granite Code model hosted on Replicate to generate optimized Python code, demonstrating the power of prompt engineering for efficiency gains in practical coding tasks.

---

## Setting Up Google Colab

### Step 1: Set Up a Replicate Account
1. Create an account at [Replicate](https://replicate.com/).
2. Obtain your API token from Replicate.

### Step 2: Set Up REPLICATE_API_TOKEN and Configure the Colab Workspace
1. In Google Colab, go to “Secrets” on the left-hand panel.
2. Click on “Add new secret” and name it `REPLICATE_API_TOKEN`.
3. Paste your Replicate token into the value field.

--- 
## Code Optimization with Granite Code Model

Please follow the step-by-step process documented here below for getting output without any errors:

### Step 1: Create a Colab Jupiter Notebook instance & Initialize the replicate libraries.

Dependencies:
- ibm_granite_community.notebook_utils
- langchain_community.llms
- Replicate API (requires an API token)


#### Cell 1: Install required packages

Open a New Code Cell in Google Colab and install the required packages:

```bash
# Install required packages
!pip install git+https://github.com/ibm-granite-community/utils \
            "langchain_community<0.3.0" \ 
            replicate
```
#### Cell 2: Initialize the Replicate model
```python
# Initilize the Replicate & Colab Libraries

from ibm_granite_community.notebook_utils import get_env_var
from langchain_community.llms import Replicate
 
# Configure and load the IBM Granite model for code generation
model = Replicate(
    model="ibm-granite/granite-8b-code-instruct-128k",
    replicate_api_token=get_env_var('REPLICATE_API_TOKEN'),
    model_kwargs={"max_length": 100, "temperature": 0.2},
)
```

### Step 2:Zero-Shot Prompt Method Creation

In this step, we will define a **zeroshot_prompt** function to generate ipywidgets-based UI components for the online bookstore. This function uses the IBM Granite Code model to interpret the prompt and return code tailored to the task and question provided.


#### Cell 3: Define and Execute the Zero-Shot Prompt Function

This method formulates a zero-shot prompt where the model acts as an experienced programmer. The prompt is designed to instruct the model to generate Python code for creating an ipywidgets-based UI for an online bookstore. It takes in two inputs—context and question—to create a detailed prompt, ensuring the model understands the UI components required for the bookstore interface.

```python
def zeroshot_prompt(context, question):
    """
    Creates a zero-shot prompt for the model, where the model acts as a seasoned programmer.
 
    Parameters:
    - context: str, contextual information for the prompt
    - question: str, specific question or task for the model to perform
 
    Returns:
    - str, the formatted prompt
    """
    prompt = f"""
You are an experienced programmer with 15 years of experience writing full-stack applications. Your task is to help build an online bookstore by creating UI components using Jupyter Notebook ipywidgets for interactivity. The output code should not exceed 100 tokens, and should avoid using the GridBoxLayout attribute. Write Python code to address each specific user request. Return only the code as output. 

    Task: {context}
 
    Question: {question}
    """
    return prompt
```

#### Cell 4: Invoke the Model

```python
def get_answer_using_zeroshot(context, question):
    """
    Generates the response from the model based on a zero-shot prompt.
 
    Parameters:
    - context: str, contextual information for the prompt
    - question: str, specific question for the model to answer
 
    Returns:
    - str, the generated result from the model
    """
    prompt = zeroshot_prompt(context, question)
    result = model.invoke(prompt)
 
    return result
```

#### Cell 5: Generate and Display the UI Code

This method invokes the model to generate a response based on the zero-shot prompt. It first calls the zeroshot_prompt method to generate the formatted prompt and then passes this prompt to the model for inference. The model returns code that meets the specified requirements, such as building a UI with ipywidgets for the bookstore’s landing page.

```python
context = "Design and develop an online bookstore with user-friendly UI components."
question = "Create the landing page for users visiting my bookstore. The landing page should display a catalog of book titles as tiles and include a free-text search bar with a search icon."
 
# Generate and display the UI code for the landing page
result = get_answer_using_zeroshot(context, question)
print(f"Generated Code:\n{result}")
```

## Generated Code:

Below is an example of the generated code for the online bookstore's landing page UI using ipywidgets. This serves as a reference and provides an outline for what the output may look like:

```python
from IPython.display import display
# Create a container for the landing page
container = widgets.VBox()
# Create a title for the landing page
title = widgets.HTML(value="<h1>Welcome to our bookstore!</h1>")
# Create a catalog of book titles as tiles
catalog = widgets.GridBox(children=[
 widgets.HTML(value="<div style='background-color: #f2f2f2; padding: 20px; margin: 10px; border-radius: 5px;'><h2>Book Title 1</h2><p>Author: Author Name 1</p><p>Price: $10.00</p></div>"),
 widgets.HTML(value="<div style='background-color: #f2f2f2; padding: 20px; margin: 10px; border-radius: 5px;'><h2>Book Title 2</h2><p>Author: Author Name 2</p><p>Price: $15.00</p></div>"),
 widgets.HTML(value="<div style='background-color: #f2f2f2; padding: 20px; margin: 10px; border-radius: 5px;'><h2>Book Title 3</h2><p>Author: Author Name 3</p><p>Price: $20.00</p></div>")
], layout=widgets.Layout(grid_template_columns='repeat(3, 1fr)'))
# Create a free-text search bar with a search icon
search_bar = widgets.HBox(children=[
 widgets.Text(value="", placeholder="Search for a book", style={"width": "200px"}),
 widgets.Button(icon="search", tooltip="Search")
])
# Add the title, catalog, and search bar to the container
container.children = [title, catalog, search_bar]
# Display the container
display(container)
```